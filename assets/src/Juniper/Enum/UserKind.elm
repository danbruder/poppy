-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Juniper.Enum.UserKind exposing (..)

import Json.Decode as Decode exposing (Decoder)


type UserKind
    = Admin
    | User
    | Guest


list : List UserKind
list =
    [ Admin, User, Guest ]


decoder : Decoder UserKind
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ADMIN" ->
                        Decode.succeed Admin

                    "USER" ->
                        Decode.succeed User

                    "GUEST" ->
                        Decode.succeed Guest

                    _ ->
                        Decode.fail ("Invalid UserKind type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : UserKind -> String
toString enum =
    case enum of
        Admin ->
            "ADMIN"

        User ->
            "USER"

        Guest ->
            "GUEST"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe UserKind
fromString enumString =
    case enumString of
        "ADMIN" ->
            Just Admin

        "USER" ->
            Just User

        "GUEST" ->
            Just Guest

        _ ->
            Nothing
